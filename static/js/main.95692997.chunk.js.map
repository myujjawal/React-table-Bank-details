{"version":3,"sources":["components/GlobalSearch.js","components/TableStructure.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalSearch","filter","setFilter","className","value","onChange","e","target","IndeterminateCheckbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","INITIAL_SELECTED_ROW_IDS","JSON","parse","window","localStorage","getItem","Table","columns","data","useTable","initialState","selectedRowIds","useGlobalFilter","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","globalFilter","pageIndex","pageSize","setGlobalFilter","prepareRow","console","log","setItem","stringify","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","onClick","disabled","length","defaultValue","Number","style","width","App","initial","useState","setData","city","setCity","fetch","then","response","json","COLUMN","useMemo","accessor","for","name","require","polyfill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.95692997.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './table.css'\r\n\r\nexport const GlobalSearch = ({filter,setFilter})=>{\r\n    return (<>\r\n    <div className='Head'>\r\n        <span className='Top'>Search: {''}\r\n        <input value={filter||''} onChange={(e)=>setFilter(e.target.value)}  />\r\n        </span>\r\n        </div>\r\n    </>)\r\n}","import React from \"react\";\r\nimport { useTable,useGlobalFilter,usePagination,useRowSelect } from \"react-table\";\r\nimport {GlobalSearch} from \"./GlobalSearch\"\r\nimport './table.css'\r\n\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\n//Getting selected Rows {object} on clients localStorage or empty object for first time use\r\nconst INITIAL_SELECTED_ROW_IDS = JSON.parse(window.localStorage.getItem('initRows'))||{};\r\n\r\nexport default function Table({ columns, data }) {\r\n  \r\n  const {\r\n    getTableProps, \r\n    getTableBodyProps, \r\n    headerGroups, \r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state:{globalFilter,pageIndex, pageSize,selectedRowIds},\r\n    setGlobalFilter,\r\n    prepareRow \r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    initialState: {\r\n     \r\n      selectedRowIds: INITIAL_SELECTED_ROW_IDS  \r\n  }\r\n  },useGlobalFilter,usePagination,useRowSelect,\r\n  hooks => {\r\n    hooks.visibleColumns.push(columns => [\r\n      // Let's make a column for selection\r\n      {\r\n        id: 'selection',\r\n        // The header can use the table's getToggleAllRowsSelectedProps method\r\n        // to render a checkbox\r\n        Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n          <div>\r\n            Favourite<IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\r\n          </div>\r\n        ),\r\n        // The cell can use the individual row's getToggleRowSelectedProps method\r\n        // to the render a checkbox\r\n        Cell: ({ row }) => (\r\n          <div>\r\n            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n          </div>\r\n        ),\r\n      },\r\n      ...columns,\r\n    ])\r\n  });\r\n\r\n  //Creating selected Rows {object} on clients localStorage\r\n  console.log(selectedRowIds);\r\n  window.localStorage.setItem('initRows',JSON.stringify(selectedRowIds));\r\n\r\n  \r\n    // Render the UI for your table\r\n    \r\n  return (\r\n    <>\r\n    <GlobalSearch filter={globalFilter} setFilter={setGlobalFilter} />\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {page.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n\r\n    <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[5,10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}","import React, {useState,useEffect,useMemo} from \"react\";\r\nimport TableStructure from \"./components/TableStructure\"\r\nimport './components/table.css'\r\n\r\nrequire(\"es6-promise\").polyfill();\r\nrequire(\"isomorphic-fetch\")\r\n\r\n\r\n\r\nexport default function App() {\r\n    const initial = JSON.parse(window.localStorage.getItem('data')) || []; //Getting data cache on clients localStorage\r\n    const [data,setData]=useState(initial);\r\n    \r\n    const [city,setCity]=useState(window.localStorage.getItem('city') || \"MUMBAI\");\r\n\r\n    \r\n    //Cached API Call\r\n    useEffect(()=>{\r\n        // city = setCity(JSON.parse(window.localStorage.getItem('city'))|| \"MUMBAI\")\r\n        fetch(\"https://vast-shore-74260.herokuapp.com/banks?city=\"+city)\r\n        .then((response)=>response.json())\r\n        .then((json)=>{\r\n            setData(json); //Setting the data to state\r\n            window.localStorage.setItem('data',JSON.stringify(json)) //Creating data cache on clients localStorage\r\n            window.localStorage.setItem('city',city)\r\n        })\r\n\r\n    }\r\n    ,[city]);\r\n\r\n    const COLUMN = useMemo(\r\n        () => [{\r\n        Header :'IFSC',\r\n        accessor :'ifsc'\r\n    },{\r\n        Header :'Bank ID',\r\n        accessor :'bank_id'\r\n    },{\r\n        Header :'Branch',\r\n        accessor :'branch'\r\n    },{\r\n        Header :'Address',\r\n        accessor :'address'\r\n    },{\r\n        Header :'City',\r\n        accessor :'city'\r\n    },{\r\n        Header :'District',\r\n        accessor :'district'\r\n    },{\r\n        Header :'State',\r\n        accessor :'state'\r\n    },{\r\n        Header :'Bank Name',\r\n        accessor :'bank_name'\r\n    }\r\n    ],[])\r\n    \r\n\r\n\r\n    return(<>\r\n        <div className='top'>\r\n        <h1>Bank Searches</h1>\r\n        <label for=\"city\">Choose a City: </label>\r\n\r\n        <select \r\n        onChange={(e) => setCity(e.target.value)}\r\n        name=\"city\" id=\"city\">\r\n        <option value=\"MUMBAI\">Mumbai</option>\r\n        <option value=\"BANGALORE\">Bangalore</option>\r\n        <option value=\"DELHI\">Delhi</option>\r\n        <option value=\"PATNA\">Patna</option>\r\n        <option value=\"AGARTALA\">Agartala</option>\r\n        </select>\r\n        </div>\r\n\r\n        <TableStructure columns={COLUMN} data={data} />\r\n    </>)\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}