{"version":3,"sources":["components/GlobalSearch.js","components/TableStructure.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalSearch","filter","setFilter","className","value","onChange","e","target","fl","IndeterminateCheckbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","onClick","console","log","Favourites","Fav","JSON","parse","window","localStorage","getItem","Table","columns","data","city","INITIAL_SELECTED_ROW_IDS","useTable","initialState","selectedRowIds","useGlobalFilter","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","state","globalFilter","pageIndex","pageSize","setGlobalFilter","prepareRow","original","setItem","stringify","error","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","disabled","length","defaultValue","Number","style","width","require","polyfill","cityCache","OGcity","App","useState","setCity","cC","initData","setData","fetch","then","response","json","COLUMN","useMemo","accessor","for","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e4fbb3e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './table.css'\r\n\r\nexport const GlobalSearch = ({filter,setFilter})=>{\r\n    return (<>\r\n    <div className='Head'>\r\n        <span className='Top'>Search: {''}\r\n        <input value={filter||''} onChange={(e)=>setFilter(e.target.value)}  />\r\n        </span>\r\n        </div>\r\n    </>)\r\n}","import React from \"react\";\r\nimport { useTable,useGlobalFilter,usePagination,useRowSelect } from \"react-table\";\r\nimport {GlobalSearch} from \"./GlobalSearch\"\r\nimport './table.css'\r\n\r\nlet fl=0;\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" onClick={(e)=>{\r\n          fl=1\r\n          console.log(fl)\r\n        }} ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\nlet Favourites={};\r\n// //Getting selected Rows {object} on clients localStorage or empty object for first time use\r\nconst Fav = JSON.parse(window.localStorage.getItem('Favourites'))||{};\r\n\r\n// // const selectLen=window.localStorage.getItem('changeInSelection');\r\nconsole.log(\"getFav\",Fav);\r\n// const prevCity = JSON.parse(window.localStorage.getItem('setCity'));\r\n// console.log(\"prevCity\",prevCity);\r\n\r\n\r\n\r\n\r\nexport default function Table({ columns, data,city }) {\r\n\r\n\r\n\r\n\r\n  \r\n  const INITIAL_SELECTED_ROW_IDS = Fav[city];\r\n  \r\n  // console.log(\"loadingRows\",INITIAL_SELECTED_ROW_IDS);\r\n  \r\n  \r\n  \r\n  const {\r\n    getTableProps, \r\n    getTableBodyProps, \r\n    headerGroups, \r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n    state:{globalFilter,pageIndex, pageSize,selectedRowIds},\r\n    setGlobalFilter,\r\n    prepareRow \r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    initialState: {\r\n      \r\n      selectedRowIds: INITIAL_SELECTED_ROW_IDS  || {}\r\n  }\r\n  },useGlobalFilter,usePagination,useRowSelect,\r\n  hooks => {\r\n    hooks.visibleColumns.push(columns => [\r\n      // Let's make a column for selection\r\n      {\r\n        id: 'selection',\r\n        // The header can use the table's getToggleAllRowsSelectedProps method\r\n        // to render a checkbox\r\n        Header: ({ getToggleAllRowsSelectedProps }) => (\r\n          <div>\r\n            Favourites<IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n          </div>\r\n        ),\r\n        // The cell can use the individual row's getToggleRowSelectedProps method\r\n        // to the render a checkbox\r\n        Cell: ({ row }) => (\r\n          <div>\r\n            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n          </div>\r\n        ),\r\n      },\r\n      ...columns,\r\n    ])\r\n  });\r\n\r\n\r\nFavourites=Fav;\r\n// const PrevCity=window.localStorage.getItem(\"PrevCity\");\r\nif(fl===1){\r\n  try {\r\n    console.log(selectedFlatRows[0].original.city,selectedRowIds);\r\n\r\nFavourites[selectedFlatRows[0].original.city] = selectedRowIds;\r\nwindow.localStorage.setItem(\"Favourites\",JSON.stringify(Favourites));\r\n\r\n\r\nconsole.log(\"setFav\",Favourites);\r\n  } catch (error) {\r\n    Favourites[city] = {};\r\n    window.localStorage.setItem(\"Favourites\",JSON.stringify(Favourites));\r\n\r\n  }\r\n\r\n}\r\nfl=0;\r\nconsole.log(fl);\r\n\r\n\r\n    // Render the UI for your table\r\n    \r\n  return (\r\n    <>\r\n    <GlobalSearch filter={globalFilter} setFilter={setGlobalFilter} />\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {page.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n\r\n    <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[5,10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}","import React, {useState,useEffect,useMemo} from \"react\";\r\nimport TableStructure from \"./components/TableStructure\"\r\nimport './components/table.css'\r\n\r\nrequire(\"es6-promise\").polyfill();\r\nrequire(\"isomorphic-fetch\")\r\n\r\nlet cityCache={};\r\n// cityCache.A=[];\r\nlet OGcity=\"MUMBAI\";\r\nexport default function App() {\r\n    const [city,setCity]=useState(window.localStorage.getItem('city') || \"MUMBAI\");\r\n    // const initial = JSON.parse(window.localStorage.getItem('data')) || []; //Getting data cache on clients localStorage\r\n    const cC = JSON.parse(window.localStorage.getItem('cityCache'))||{};\r\n\r\n    \r\n\r\n    // console.log('getcachecC',cC);\r\n    cityCache=cC;\r\n    \r\n    const initData=cC[city]||[];\r\n    const [data,setData]=useState(initData);\r\n \r\n    //Cached API Call\r\n    useEffect(()=>{\r\n        // city = setCity(JSON.parse(window.localStorage.getItem('city'))|| \"MUMBAI\")\r\n        if (city in cC) {\r\n            setData(cC[city]);\r\n        } else {\r\n            fetch(\"https://vast-shore-74260.herokuapp.com/banks?city=\"+city)\r\n            .then((response)=>response.json())\r\n            .then((json)=>{\r\n\r\n            setData(json); //Setting the data to state\r\n            cityCache[city]=json;\r\n            window.localStorage.setItem('cityCache',JSON.stringify(cityCache));\r\n        })\r\n        }\r\n        \r\n\r\n    }\r\n    ,[city]);\r\n    \r\n    const COLUMN = useMemo(\r\n        () => [{\r\n        Header :'IFSC',\r\n        accessor :'ifsc'\r\n    },{\r\n        Header :'Bank ID',\r\n        accessor :'bank_id'\r\n    },{\r\n        Header :'Branch',\r\n        accessor :'branch'\r\n    },{\r\n        Header :'Address',\r\n        accessor :'address'\r\n    },{\r\n        Header :'City',\r\n        accessor :'city'\r\n    },{\r\n        Header :'District',\r\n        accessor :'district'\r\n    },{\r\n        Header :'State',\r\n        accessor :'state'\r\n    },{\r\n        Header :'Bank Name',\r\n        accessor :'bank_name'\r\n    }\r\n    ],[])\r\n    \r\n    // window.localStorage.setItem('cityCache',cityCache[city]=JSON.stringify(data));\r\n    \r\n    return(<>\r\n        <div className='top'>\r\n        <h1>Bank Searches</h1>\r\n        <label for=\"city\">Choose a City: </label>\r\n\r\n        <select \r\n        onChange={(e) => {\r\n            window.localStorage.setItem(\"PrevCity\",JSON.stringify(OGcity));\r\n            OGcity= e.target.value;\r\n            setCity(e.target.value);\r\n            console.log(e.data);\r\n            }}\r\n        name=\"city\" id=\"city\">\r\n        <option value=\"MUMBAI\">Mumbai</option>\r\n        <option value=\"BANGALORE\">Bangalore</option>\r\n        <option value=\"DELHI\">Delhi</option>\r\n        <option value=\"PATNA\">Patna</option>\r\n        <option value=\"AGARTALA\">Agartala</option>\r\n        </select>\r\n        </div>\r\n\r\n        <TableStructure columns={COLUMN} data={data} city={city}/>\r\n    </>)\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}